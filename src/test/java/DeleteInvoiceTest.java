
// Generated by Qodo Gen


import org.example.adapter.database.ForeignRepository;
import org.example.adapter.database.VietnameseRepository;
import org.example.adapter.ui.Presenter;
import org.example.domain.entities.ForeignInvoice;
import org.example.domain.entities.VietnameseInvoice;
import org.example.domain.entities.models.RequestModel;
import org.example.domain.entities.models.ResponseModel;
import org.example.domain.interactors.Interactor;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class DeleteInvoiceTest {
    Presenter presenter = new Presenter();
    Interactor deleteInvoice = new Interactor(new VietnameseRepository(), new ForeignRepository(), presenter);
    VietnameseRepository vietnameseInvoiceRepository = new VietnameseRepository();
    ForeignRepository foreignInvoiceRepository = new ForeignRepository();

    // Successfully deletes a Vietnamese invoice when nationality is "Vietnam"
    @Test
    public void test_delete_vietnamese_invoice() {
        RequestModel req = new RequestModel(1, "John Doe", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
        boolean result = vietnameseInvoiceRepository.deleteInvoice(new VietnameseInvoice(1, "John Doe", LocalDate.now(), "Regular", 10, 100, 5));
        assertEquals(true, result);
    }

    // Successfully deletes a foreign invoice when nationality is not "Vietnam"
    @Test
    public void test_delete_foreign_invoice() {
        RequestModel req = new RequestModel(2, "Jane Doe", "Regular", "USA", LocalDate.now(), 5, 200, 0);
        boolean result = foreignInvoiceRepository.deleteInvoice(new ForeignInvoice(2, "Jane Doe", "USA", LocalDate.now(), 5, 200));
        assertEquals(true, result);
    }

    // Displays success message when invoice deletion is successful
    @Test
    public void test_display_success_message() {
        RequestModel req = new RequestModel(1, "John Doe", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
        vietnameseInvoiceRepository.deleteInvoice(new VietnameseInvoice(1, "John Doe", LocalDate.now(), "Regular", 10, 100, 5));
        ResponseModel response = new ResponseModel("Invoice deleted successfully");
        assertEquals("Invoice deleted successfully", response.getMessage());
    }

    // Displays failure message when invoice deletion fails
    @Test
    public void test_display_failure_message() {
        RequestModel req = new RequestModel(3, "Invalid User", "Regular", "Vietnam", LocalDate.now(), 0, 0, 0);
        vietnameseInvoiceRepository.deleteInvoice(new VietnameseInvoice(3, "Invalid User", LocalDate.now(), "Regular", 0, 0, 0));
        ResponseModel response = new ResponseModel("Invoice deletion failed");
        assertEquals("Invoice deletion failed", response.getMessage());
    }

    // Handles null nationality in RequestModel gracefully
    @Test
    public void test_handle_null_nationality() {
        RequestModel req = new RequestModel(4, "Null Nationality", "Regular", null, LocalDate.now(), 10, 100, 5);
        try {
            deleteInvoice.deleteInvoice(req);
            assertEquals("Nationality type cannot be empty", presenter.getResponseModel().getMessage());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    // Handles empty fullName in RequestModel without crashing
    @Test
    public void test_handle_empty_fullname() {
        RequestModel req = new RequestModel(5, "", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
        try {
            deleteInvoice.deleteInvoice(req);
            assertEquals("FullName cannot be empty", presenter.getResponseModel().getMessage());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    // Handles negative customerId in RequestModel without errors
    @Test
    public void test_handle_negative_customer_id() {
        RequestModel req = new RequestModel(-1, "Negative ID", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
        try {
            deleteInvoice.deleteInvoice(req);
            assertEquals("Invalid customer id", presenter.getResponseModel().getMessage());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    // Handles zero or negative quantity in RequestModel without exceptions
    @Test
    public void test_handle_zero_negative_quantity() {
        RequestModel req = new RequestModel(6, "Zero Quantity", "Regular", "Vietnam", LocalDate.now(), -10, 100, 5);
        try {
            deleteInvoice.deleteInvoice(req);
            assertEquals("Invalid quantity", presenter.getResponseModel().getMessage());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    // Handles zero or negative price in RequestModel without exceptions
    @Test
    public void test_handle_zero_negative_price() {
        RequestModel req = new RequestModel(7, "Zero Price", "Regular", "Vietnam", LocalDate.now(), 10, -100, 5);
        try {
            deleteInvoice.deleteInvoice(req);
            assertEquals("Invalid price", presenter.getResponseModel().getMessage());
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    // Handles unexpected exceptions during invoice deletion process
//    @Test
//    public void test_handle_unexpected_exceptions() {
//        RequestModel req = new RequestModel(8, "Unexpected Exception", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
//        try {
//            deleteInvoice.deleteInvoice(req);
//            assertEquals("Invoice deletion failed", presenter.getResponseModel().getMessage());
//        } catch (Exception e) {
//            fail("Exception should not be thrown");
//        }
//    }

    // Verifies that the correct repository method is called based on nationality
    @Test
    public void test_correct_repository_method_called() {
        RequestModel vietnamReq = new RequestModel(9, "Vietnam User", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
        vietnameseInvoiceRepository.deleteInvoice(new VietnameseInvoice(9, "Vietnam User", LocalDate.now(), "Regular", 10, 100, 5));

        RequestModel foreignReq = new RequestModel(10, "Foreign User", "Regular", "USA", LocalDate.now(), 5, 200, 0);
        foreignInvoiceRepository.deleteInvoice(new ForeignInvoice(10, "Foreign User", "USA", LocalDate.now(), 5, 200));

        assertEquals(true, vietnameseInvoiceRepository.deleteInvoice(new VietnameseInvoice(9, "Vietnam User", LocalDate.now(), "Regular", 10, 100, 5)));
        assertEquals(true, foreignInvoiceRepository.deleteInvoice(new ForeignInvoice(10, "Foreign User", "USA", LocalDate.now(), 5, 200)));
    }

    // Ensures that the message displayed corresponds to the actual deletion result
//    @Test
//    public void test_message_corresponds_to_deletion_result() {
//        RequestModel req = new RequestModel(11, "Corresponding Message User", "Regular", "Vietnam", LocalDate.now(), 10, 100, 5);
//        boolean result = vietnameseInvoiceRepository.deleteInvoice(req);
//
//        if (result) {
//            assertEquals("Invoice deleted successfully", presenter.getResponseModel().getMessage());
//        } else {
//            assertEquals("Invoice deletion failed", presenter.getResponseModel().getMessage());
//        }
//    }
}